{"version":3,"sources":["components/ContactList/ContactList.module.scss","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactForm","state","name","number","nameId","shortid","generate","numberId","handleInputChange","event","target","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","type","pattern","title","required","onChange","id","Component","ContactList","contacts","onDelete","className","styles","contact_list","map","contact","onClick","Filter","handleFilterChange","filterId","filter","App","addContact","data","checkUniqueName","prevState","alert","deleteContact","changeFilter","toLowerCase","findIndex","getFilteredContacts","includes","filteredContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbd23d1e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__2c0Jf\",\"section\":\"ContactList_section__qHlvl\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\n// import styles from './Section.module.scss';\n\nclass ContactForm extends Component {\n    static propTypes = { title: PropTypes.string };\n    state = {\n        name: '',\n        number: '',\n    };\n\n    nameId = shortid.generate();\n    numberId = shortid.generate();\n    handleInputChange = event => {\n        const { value, name } = event.target;\n        this.setState({\n            [name]: value,\n        });\n    };\n    handleSubmit = event => {\n        event.preventDefault();\n        this.props.onSubmit(this.state);\n        this.reset();\n    };\n\n    reset = () => {\n        this.setState({ name: '', number: '' });\n    };\n    render() {\n        const { name, number } = this.state;\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor={this.nameId}>\n                    Name\n                    <input\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        required\n                        value={name}\n                        onChange={this.handleInputChange}\n                        id={this.nameId}\n                    />\n                </label>\n                <label htmlFor={this.numberId}>\n                    Number\n                    <input\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        required\n                        value={number}\n                        onChange={this.handleInputChange}\n                        id={this.numberId}\n                    />\n                </label>\n                <button type=\"sumbit\">Add contact</button>\n            </form>\n        );\n    }\n}\nexport default ContactForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './ContactList.module.scss';\n\nclass ContactList extends Component {\n    static propTypes = { title: PropTypes.string };\n    state = {\n        name: '',\n        number: '',\n    };\n    render() {\n        const { contacts, onDelete } = this.props;\n        return (\n            <ul className={styles.contact_list}>\n                {contacts.map(contact => (\n                    <li key={contact.id}>\n                        <p>{contact.name}</p>\n                        <p>{contact.number}</p>\n                        <button\n                            type=\"button\"\n                            onClick={() => {\n                                onDelete(contact.id);\n                            }}\n                        >\n                            Delete\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        );\n    }\n}\nexport default ContactList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\n// import styles from './Section.module.scss';\n\nclass Filter extends Component {\n    static propTypes = { filter: PropTypes.string };\n    handleFilterChange = event => {\n        const { value } = event.target;\n        this.props.onChange(value);\n    };\n    filterId = shortid.generate();\n    render() {\n        const { filter, title } = this.props;\n        return (\n            <label htmlFor={this.filterId}>\n                <span>{title}</span>\n                <input\n                    type=\"text\"\n                    name=\"filter\"\n                    required\n                    value={filter}\n                    onChange={this.handleFilterChange}\n                    id={this.filterId}\n                />\n            </label>\n        );\n    }\n}\nexport default Filter;\n","import { Component } from 'react';\nimport shortid from 'shortid';\nimport './App.css';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport Filter from './components/Filter/';\n\nexport default class App extends Component {\n    state = {\n        contacts: [\n            { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n            { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n            { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n            { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n        ],\n        filter: '',\n    };\n\n    addContact = data => {\n        this.checkUniqueName(data.name) === -1\n            ? this.setState(prevState => ({\n                  contacts: [\n                      ...prevState.contacts,\n                      { id: shortid.generate(), ...data },\n                  ],\n              }))\n            : alert(`${data.name} is already in contacts`);\n    };\n    deleteContact = id => {\n        this.setState(prevState => ({\n            contacts: [...prevState.contacts].filter(\n                contact => contact.id !== id,\n            ),\n        }));\n    };\n\n    changeFilter = data => {\n        this.setState({ filter: data.toLowerCase() });\n    };\n\n    checkUniqueName = name => {\n        const { contacts } = this.state;\n        return contacts.findIndex(contact => contact.name === name);\n    };\n\n    getFilteredContacts = () => {\n        const { contacts, filter } = this.state;\n        return contacts.filter(contact =>\n            contact.name.toLowerCase().includes(filter),\n        );\n    };\n\n    render() {\n        const { filter } = this.state;\n        const filteredContacts = this.getFilteredContacts();\n        return (\n            <div className=\"App\">\n                <h1>Phonebook</h1>\n                <ContactForm onSubmit={this.addContact} />\n                <h2>Contacts</h2>\n                <ContactList\n                    contacts={filteredContacts}\n                    onDelete={this.deleteContact}\n                />\n                <Filter\n                    title={'Find contacts by name'}\n                    filter={filter}\n                    onChange={this.changeFilter}\n                />\n            </div>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            },\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}